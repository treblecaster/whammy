#!/usr/bin/env python

"""
    Digitech Whammy functions!
"""

import sys
import os
import pygame
import pygame.midi
from pygame.locals import *
from timesig import *


class Stomp():
    """ State of stomp switch """
    on     = 127
    bypass = 0

class Toe():
    """ Position of expression pedal """
    down = 127
    up   = 0

class Effect():
    """ Type of effect generated by the pedal """
    shallowDetune       = 0
    deepDetune          = 1
    up2Octaves          = 2
    upOctave            = 3
    downOctave          = 4
    down2Octaves        = 5
    diveBomb            = 6
    dropTune            = 7
    downOctaveUpOctave  = 8
    down5thDown4th      = 9
    down4thDown3rd      = 10
    up5thUp7th          = 11
    up5thUp6th          = 12
    up4thUp5th          = 13
    up3rdUp4th          = 14
    up2ndUp3rd          = 15


class Whammy(pygame.midi.Output):
    """Whammy is used to send MIDI commands to a Digitech Whammy.

    This is the core functionality.
    """

    # Configuration
    _channel = None

    # Track the state of the hardware, starts in an unknown state
    _stomp  = None
    _effect = None
    _toe    = None

    def __init__(self, device_id, latency = 0, channel = 0):
        pygame.midi.Output.__init__(self, device_id, latency)
        self._channel = channel
        Whammy.setEffect(self, 0, Effect.upOctave, Stomp.on)
        Whammy.setToe(self, 0, Toe.up)
        
    def setStomp(self, timestamp, stomp):
        self._stomp = stomp
        #self.write_short(0xb0, 0, stomp)
        self.write([[[0xb0 + self._channel, 0, stomp], timestamp]])
        
    def setToe(self, timestamp, toe):
        self._toe = toe
        #self.write_short(0xb0, 11, toe)
        self.write([[[0xb0 + self._channel, 11, toe], timestamp]])

    def setEffect(self, timestamp, effect, stomp = None):
        self._effect = effect

        if stomp != None:
            self._stomp = stomp

        # Setting the effect also sets the stomp state.  Using patches 0-15
        # enables the pedal, using 16-31 maps to the same effects but bypassed.
        # Make stomp an optional parameter so that above layers don't
        # necessarily have to set the state whenever the effect is set.
        if self._stomp == Stomp.bypass:
            effect = effect + 16
            
        #self.write_short(0xc0, effect)
        self.write([[[0xc0 + self._channel, effect], timestamp]])        
    def getStomp(self):
        return self._stomp

    def getToe(self):
        return self._toe

    def getEffect(self):
        return self._effect


class WhammyFilter(Whammy):
    """WhammyFilter filters out unnecessary commands so that they never become
    MIDI packets, never consume time, never cause the pedal to "blip".

    This may have unintended consequences such making the commands sound uneven.
    """

    # Need some time to let initialization complete
    _itime = 200

    def __init__(self, device_id, latency = 0, channel = 0):
        Whammy.__init__(self, device_id, latency, channel)
        # Mute
        Whammy.setEffect(self, 1, Effect.diveBomb)
        Whammy.setToe(self, 1, Toe.down)

        # A hack cause I can't figure out how to reset time
        print " call "
        self._itime += pygame.midi.time()
        
    def iTime(self, timestamp):
        return timestamp + self._itime

    def setStomp(self, timestamp, stomp):
        if stomp != Whammy.getStomp(self):
            Whammy.setStomp(self, self.iTime(timestamp), stomp)

    def setToe(self, timestamp, toe):
        timestamp = self.iTime(timestamp)
        if toe != Whammy.getToe(self):
            Whammy.setToe(self, timestamp, toe)

    def setEffect(self, timestamp, effect, stomp = None):
        timestamp = self.iTime(timestamp)
        if effect != Whammy.getEffect(self):
            Whammy.setEffect(self, timestamp, effect, stomp)
        elif stomp != None:
            # Not sure why you would do this
            WhammyFilter.setStomp(self, timestamp, stomp)

    def setW(self, timestamp, effect = None, toe = None, stomp = None):
        timestamp = self.iTime(timestamp)
        if toe != None:
            WhammyFilter.setToe(self, timestamp, toe)
        if effect != None:
            WhammyFilter.setEffect(self, timestamp, effect, stomp)
        elif stomp != None:
            WhammyFilter.setStomp(self, timestamp, stomp)

    def setClean(self, timestamp):
        timestamp = self.iTime(timestamp)
        WhammyFilter.setEffect(self, timestamp, Effect.upOctave, Stomp.on)
        WhammyFilter.setToe(self, timestamp, Toe.up)

    def setMute(self, timestamp):
        timestamp = self.iTime(timestamp)
        WhammyFilter.setEffect(self, timestamp, Effect.diveBomb, Stomp.on)
        WhammyFilter.setToe(self, timestamp, Toe.down)

class WhammyTime(WhammyFilter):
    _latency = 2000
    _channel = 0
    _timeSig = None
    
    def __init__(self, device_id, beats, noteval, bpm):
        WhammyFilter.__init__(self, device_id, self._latency, self._channel)
        self._timeSig = TimeSig(beats, noteval, bpm)
        
    def setStomp(self, bar, note, stomp):
        time = self._timeSig.time(bar, note)
        WhammyFilter.setStomp(self, time, stomp)
    
    def setToe(self, bar, note, toe):
        time = self._timeSig.time(bar, note)
        WhammyFilter.setToe(self, time, toe)
    
    def setEffect(self, bar, note, effect, stomp = None):
        time = self._timeSig.time(bar, note)
        WhammyFilter.setEffect(self, time, effect, stomp)
    
    def setW(self, bar, note, effect = None, toe = None, stomp = None):
        time = self._timeSig.time(bar, note)
        WhammyFilter.setW(self, time, effect, toe, stomp)
    
    def setClean(self, bar, note):
        time = self._timeSig.time(bar, note)
        WhammyFilter.setClean(self, time)
    
    def setMute(self, bar, note):
        time = self._timeSig.time(bar, note)
        WhammyFilter.setMute(self, time)

    def metronome(self, measure, val):
        for beat in range(0, self._timeSig.getBeats()):
            beep = beat * val
            if beat == 0:
                self.setW(measure, beep, Effect.up2Octaves, Toe.down)
            else:
                self.setW(measure, beep, Effect.upOctave, Toe.down)

            time = self._timeSig.time(measure, beep) + 100
            WhammyFilter.setMute(self, time)       


def main(device_id=None):
    pygame.init()
    pygame.midi.init()

    if device_id is None:
        port = pygame.midi.get_default_output_id()
    else:
        port = device_id

    midi_out = WhammyTime(port, 4, 4, 60)

                
if __name__ == '__main__':

    try:
        device_id = int( sys.argv[-1] )
    except:
        device_id = None

    main(device_id)
